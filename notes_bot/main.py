import logging
from aiogram import Bot, types, F
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from config import TOKEN, DB_CONFIG
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database()

class NoteStates(StatesGroup):
    start = State()
    add_note = State()
    delete_note = State()

def get_main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note")],
            [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏", callback_data="view_notes")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="delete_note")]
        ]
    )

def get_delete_menu(notes):
    buttons = []
    for note in notes:
        buttons.append([InlineKeyboardButton(
            text=f"üóëÔ∏è {note['note_text'][:30]}",
            callback_data=f"delete_{note['id']}"
        )])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.set_state(NoteStates.start)
    await message.answer(
        "üìù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏!",
        reply_markup=get_main_menu()
    )

@dp.callback_query(F.data.in_(["add_note", "view_notes", "delete_note"]), NoteStates.start)
async def process_main_menu(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "add_note":
        await state.set_state(NoteStates.add_note)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:")
    elif callback.data == "view_notes":
        notes = await db.get_notes(callback.from_user.id)
        if notes:
            text = "\n\n".join(f"{i+1}. {note['note_text']}" for i, note in enumerate(notes))
            await callback.message.answer(
                f"üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n{text}",
                reply_markup=get_main_menu()  # <--- –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–æ–∫
            )
        else:
            await callback.message.answer(
                "‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.",
                reply_markup=get_main_menu()  # <--- –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç
            )
    elif callback.data == "delete_note":
        notes = await db.get_notes(callback.from_user.id)
        if notes:
            await state.set_state(NoteStates.delete_note)
            await callback.message.answer(
                "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=get_delete_menu(notes)
            )
        else:
            await callback.message.answer(
                "‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=get_main_menu()  # <--- –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç
            )
    await callback.answer()

@dp.message(NoteStates.add_note)
async def process_add_note(message: types.Message, state: FSMContext):
    await db.add_note(message.from_user.id, message.text)
    await message.answer("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_main_menu())
    await state.set_state(NoteStates.start)

@dp.callback_query(F.data.startswith("delete_"), NoteStates.delete_note)
async def process_delete_note(callback: types.CallbackQuery, state: FSMContext):
    note_id = int(callback.data.split("_")[1])
    notes = await db.get_notes(callback.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
    note_to_delete = next((note for note in notes if note['id'] == note_id), None)  # –ù–∞—Ö–æ–¥–∏–º –∑–∞–º–µ—Ç–∫—É –ø–æ ID
    if note_to_delete and await db.delete_note(callback.from_user.id, note_id):
        await callback.message.answer(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ \"{note_to_delete['note_text'][:30]}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=get_main_menu()
        )
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.", reply_markup=get_main_menu())
    await state.set_state(NoteStates.start)
    await callback.answer()

@dp.callback_query(F.data == "cancel")
async def process_cancel(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(NoteStates.start)
    await callback.message.answer("üîô –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
    await callback.answer()

async def on_startup():
    await db.create_pool()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("Bot ready")

async def on_shutdown():
    await db.pool.close()
    logger.info("–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

async def main():
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == '__main__':
    import asyncio
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")