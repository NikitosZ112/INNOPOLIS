import asyncio
import os
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from states import AddTaskStates
from keyboards import get_delete_task_keyboard, get_cancel_keyboard
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())
SERVER_URL = os.getenv("SERVER_URL")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/show_tasks - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/add_task - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "/delete_task - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
    )

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á
@dp.message(Command("show_tasks"))
async def cmd_show_tasks(message: types.Message):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{SERVER_URL}/tasks?user_id={message.from_user.id}"
            ) as response:
                if response.status == 200:
                    tasks = await response.json()
                    if tasks:
                        tasks_text = "\n".join(
                            f"{task['id']}. {task['name']} (–¥–µ–¥–ª–∞–π–Ω: {task['deadline']})"
                            for task in tasks
                        )
                        await message.answer(
                            f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{tasks_text}"
                        )
                    else:
                        await message.answer(
                            "–ó–∞–¥–∞—á –Ω–µ—Ç."
                        )
                else:
                    error = await response.text()
                    await message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {error}",
                    )
    except Exception as e:
        await message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
        )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.message(Command("add_task"))
async def cmd_add_task(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AddTaskStates.name)

@dp.message(AddTaskStates.name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text.startswith('/'):
        await dp.feed_update(bot, types.Update(
            update_id=0,
            message=message
        ))
        return
    
    await state.update_data(name=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–î–î.–ú–ú.–ì–ì–ì–ì):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AddTaskStates.deadline)

@dp.message(AddTaskStates.deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    user_input = message.text.strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if user_input.lower() == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        name = data["name"]
        user_id = message.from_user.id
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        deadline_date = datetime.strptime(user_input, "%d.%m.%Y").date()
        today = datetime.now().date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if deadline_date < today:
            await message.answer(
                f"üìÖ –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è ({today.strftime('%d.%m.%Y')})!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì):",
                reply_markup=get_cancel_keyboard()
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await state.update_data(name=name)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        async with aiohttp.ClientSession() as session:
            response = await session.post(
                f"{SERVER_URL}/tasks",
                json={
                    "name": name,
                    "deadline": deadline_date.strftime("%Y-%m-%d"),
                    "user_id": user_id
                }
            )
            
            if response.status == 200:
                await message.answer(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                    f"–î–µ–¥–ª–∞–π–Ω: {user_input}",
                )
                await state.clear()
            else:
                error = await response.text()
                await message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É —Å–Ω–æ–≤–∞:",
                    reply_markup=get_cancel_keyboard()
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                await state.set_state(AddTaskStates.deadline)
                await state.update_data(name=name)
    
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –¢—Ä–µ–±—É–µ—Ç—Å—è –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ü—Ä–∏–º–µ—Ä: 15.07.2025\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(AddTaskStates.deadline)
        await state.update_data(name=data["name"])


# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.message(Command("delete_task"))
async def cmd_delete_task(message: types.Message):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{SERVER_URL}/tasks?user_id={message.from_user.id}"
            ) as response:
                if response.status == 200:
                    tasks = await response.json()
                    if tasks:
                        await message.answer(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                            reply_markup=get_delete_task_keyboard(tasks)
                        )
                    else:
                        await message.answer(
                            "‚ùó –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                        )
                else:
                    error = await response.text()
                    await message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞: {error}",
                    )
    except Exception as e:
        await message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}",
        )

@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def process_delete_callback(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.delete(
                f"{SERVER_URL}/tasks/{task_id}",
                params={"user_id": user_id}
            ) as response:
                if response.status == 200:
                    await callback.message.edit_text(
                        "‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!",
                        reply_markup=None
                    )
                else:
                    error = await response.text()
                    await callback.message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞: {error}",
                        reply_markup=None
                    )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}",
            reply_markup=None
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.content_type.in_({'photo', 'video', 'document', 'sticker'}))
async def handle_media(message: types.Message):
    await message.answer(
        "üìé –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.",
    )

@dp.message(F.text.lower().in_({"–º–µ–Ω—é", "—Å—Ç–∞—Ä—Ç", "start", "–∫–æ–º–∞–Ω–¥—ã"}))
async def handle_text_commands(message: types.Message):
    await cmd_start(message)

@dp.message()
async def handle_other_messages(message: types.Message, state: FSMContext):
    if await state.get_state() is None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.",
        )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())